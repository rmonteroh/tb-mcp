import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, "..", "..");

export interface ResourceDefinition {
  name: string;
  uri: string;
  description?: string;
  handler: () => Promise<{
    contents: Array<{
      text: string;
      uri: string;
      mimeType: string;
    }>;
  }>;
}

// Contract Resource
export const contractResource: ResourceDefinition = {
  name: "ticketbeep-contract",
  uri: "doc://contract.txt",
  description: "TicketBeep API contract and documentation",
  handler: async () => ({
    contents: [
      {
        text: fs.readFileSync(
          path.join(rootDir, "src", "assets", "contract.txt"),
          "utf8"
        ),
        uri: "contract.txt",
        mimeType: "text/plain",
      },
    ],
  }),
};

// API Documentation Resource
export const apiDocsResource: ResourceDefinition = {
  name: "ticketbeep-api-docs",
  uri: "doc://api-docs.md",
  description: "TicketBeep API documentation and usage guide",
  handler: async () => {
    const apiDocsContent = `# TicketBeep API Documentation

## Overview
The TicketBeep API provides comprehensive access to music industry data for media planning, campaign management, and analytics.

## Base URL
\`${process.env.TICKETBEEP_API_BASE_URL || 'https://ticketbeep-api-dev.up.railway.app'}\`

## Authentication
Most endpoints require an API key passed in the \`x-api-key\` header or Bearer token authentication.

## Main Tool Categories

### Media Planning
- \`generate_media_plan\`: Create comprehensive media plans
- \`search_artists\`: Find artists by name
- \`get_artist_by_id\`: Get detailed artist information

### Geographic Tools
- \`score_zipcodes\`: Score ZIP codes for targeting
- \`get_nearby_states\`: Find neighboring states

### Campaign Management
- \`create_campaign\`: Create marketing campaigns
- \`get_campaigns\`: List all campaigns
- \`update_campaign\`: Modify existing campaigns
- \`delete_campaign\`: Remove campaigns

### Analytics & Reporting
- \`get_average_ticket_price\`: Ticket pricing analytics
- \`get_top_cities\`: Top performing cities
- \`get_top_genres\`: Top performing genres
- \`get_gross_revenue\`: Revenue analytics

### Billboard & Radio
- \`query_billboards\`: Search billboard inventory
- \`query_analog_radio\`: Search radio stations

### Activity Tracking
- \`create_session\`: Start user sessions
- \`query_sessions\`: Query session data
- \`create_action\`: Log user actions

## Quick Start
1. Search for an artist: \`search_artists\`
2. Get artist details: \`get_artist_by_id\`
3. Generate media plan: \`generate_media_plan\`

## Rate Limits
API calls are subject to rate limiting. Please implement appropriate retry logic.

## Support
For technical support, refer to the contract documentation or API logs.
`;

    return {
      contents: [
        {
          text: apiDocsContent,
          uri: "api-docs.md",
          mimeType: "text/markdown",
        },
      ],
    };
  },
};

// Schema Reference Resource
export const schemaResource: ResourceDefinition = {
  name: "ticketbeep-schemas",
  uri: "doc://schemas.json",
  description: "TicketBeep API request/response schemas",
  handler: async () => {
    const schemaContent = {
      mediaPlan: {
        request: {
          artistId: "string",
          venue: "string",
          totalBudget: "number",
          startDate: "string (YYYY-MM-DD)",
          endDate: "string (YYYY-MM-DD)",
          config: {
            digital: "boolean",
            geo: "boolean",
            influencer: "boolean",
            ooh: "boolean",
            analog: "boolean",
          },
        },
        response: {
          budget: "object",
          phases: "object[]",
          summary: "object",
        },
      },
      artist: {
        search: {
          name: "string",
        },
        response: {
          id: "string",
          name: "string",
          genres: "string[]",
          followers: "number",
          metadata: "object",
        },
      },
      campaign: {
        create: {
          artistId: "string",
          venueId: "string",
          phases: "object",
          summary: "object",
          configuration: "object",
          userId: "string",
        },
      },
      zipcode: {
        score: {
          zipcodes: "string[]",
          artistId: "string",
          artistTotalFollowers: "number",
          ethnicity: {
            code: "string",
            name: "string",
            weight: "string",
          },
          artistCountryCode: "string",
          scoreFilters: {
            nationality: "boolean",
            ethnicity: "boolean",
            sales: "boolean",
            income: "boolean",
            customerSpending: "boolean",
          },
        },
      },
    };

    return {
      contents: [
        {
          text: JSON.stringify(schemaContent, null, 2),
          uri: "schemas.json",
          mimeType: "application/json",
        },
      ],
    };
  },
};

// Export all resources
export const allResources: ResourceDefinition[] = [
  contractResource,
  apiDocsResource,
  schemaResource,
];

// Registration function for resources
export function registerResources(server: McpServer): void {
  allResources.forEach(resource => {
    server.resource(resource.name, resource.uri, resource.handler);
  });
}

// Category-specific registration functions
export function registerDocumentationResources(server: McpServer): void {
  const docResources = [contractResource, apiDocsResource];
  docResources.forEach(resource => {
    server.resource(resource.name, resource.uri, resource.handler);
  });
}

export function registerSchemaResources(server: McpServer): void {
  server.resource(schemaResource.name, schemaResource.uri, schemaResource.handler);
}